// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(Params* params, vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    cout<<"cost_model = "<<params->cost_model<<endl;
    int dim = int(l.size());
    BKZJSim* sim = new BKZJSim(params,dim);
    COST* cost = new COST(params);
    double Gcum = -1000., Bcum = -1000., cum_pr = 0., rem_pr = 1., GBKZ = -1000.;
    pair<double,double> G;
    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            int beta_ = get_beta_(params, beta, jump, dim);
            // cout<<"beta = "<<beta <<", beta_ = "<< beta_<<". jump = "<< jump<<endl;

            // vector<double> l1, l2;
            sim -> simulate(l,l,beta,jump,1);
            double slope = get_current_slope(l,0,dim);
            boost::math::chi_squared chisquare(beta_);
            // cout<<beta_<<","<<beta<<endl;
            double pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
            // pr = 0.;
            // FP_NR<FT> pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
            // printf("(beta,jump) = (%d,%d), pr = %e\n", beta, jump, pr);
            // vector<double> l_;
            // sim -> simulate(l2,l,beta,1,1);
            // double slope1 = get_current_slope(l,0,dim);
            // boost::math::chi_squared chisquare1(beta);
            // // cout<<beta_<<","<<beta<<endl;
            
            // double pr1 = boost::math::cdf(chisquare1,pow(2,2.*l2[dim-beta]));
            // cout<<"slope = "<<slope1<<endl;
            // printf("(beta,jump) = (%d,%d), pr = %e\n", beta, 1, pr1);

            // l = l2;

            G = cost->bkz_cost(dim,beta,jump,params->cost_model);
            // cout<<"G.first"<<endl;
            if(params->verbose)
                printf("Strategy (%d,%d,%d), slope = %lf, sim-cost = %3.7f log(sec)\n", beta,jump,t+1,slope, G.first );
            
            GBKZ = log2(pow(2,GBKZ)+pow(2,G.first));
            // cout<<"GBKZ = "<<GBKZ<<", beta = "<<beta<<endl;
            if(not params->worst_case){
                Gcum = log2(pow(2,Gcum)+pow(2,GBKZ)*rem_pr*pr);
                Bcum = log2(pow(2,Bcum)+pow(2,G.second)*rem_pr*pr);
            }
            else{
                Gcum = GBKZ;
                Bcum = max(Bcum, G.second);
            }

            cum_pr += rem_pr * pr;
            rem_pr = 1. - cum_pr;

            // cout<<"cum_pr = "<<cum_pr<<endl;
        } 
    }

    // print_vector(l,0,dim);
    for(int i = 0; i < dim; i++){
        l[i] -= log2(sigma);
    }


    tuple<int,int,double,double,double> dsvp_t_;
    if(params->worst_case)
        dsvp_t_ = dsvp_predict(l, 0., cost, params->cost_model, make_pair(Gcum, Bcum));
    else
        dsvp_t_ = dsvp_predict(l, cum_pr, cost, params->cost_model, make_pair(GBKZ, G.second));
        // cout<<"cum_pr = "<<cum_pr<<endl;
    int dsvp = get<1>(dsvp_t_);
    // int f = wrapper_default_dim4free_fun(dsvp);
    int f = get_f_for_pump(params,dsvp);
    // int f = dims4free(dsvp);
    if(params->cost_model==1)
        printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f,  get<2>(dsvp_t_)); 
        
    if(params->cost_model==2)
        printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f,  pow(2,get<4>(dsvp_t_))); 

    if(not params->worst_case)
        Gcum = log2(pow(2,Gcum)+pow(2,get<2>(dsvp_t_)));
    else
        Gcum = log2(pow(2,Gcum)+pow(2,get<4>(dsvp_t_)));
         
    // Gcum = log2(pow(2,Gcum)+pow(2,get<4>(dsvp_t_)));
    
    Bcum = max(Bcum, get<3>(dsvp_t_));
    if(params->cost_model==2)
        cout<<"Gcum = "<<pow(2,Gcum)<<", Bcum = "<<pow(2,Bcum)<<endl;
    if(params->cost_model==1)
        cout<<"Gcum = "<< Gcum <<", Bcum = "<< Bcum<<endl;
    cout<<"============================="<<endl;
}


//Simulate the stratey from original lwe instance 
void test_lwechal_from_original_instance(Params* params, int n, double alpha, vector<tuple<int,int,int>> strategy){
    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    // printf("No sigma normalization,");
    // sim_strategy(params, l, strategy,sigma);

    printf("After a sigma normalization,");
    for(int i = 0; i < dim; i++){
        l[i] -=  log2(sigma);
    }
    double slope = get_current_slope(l,0,dim);
    printf("slope = %f\n", slope);
    sim_strategy(params, l, strategy,1.);
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa(Params* params, int dim, double dvol, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    vector<double>  l = gen_simulated_gso(dim, dvol);
    double slope = get_current_slope(l,0,dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


void test_nist_from_gsa(Params* params,int n, int m, int q,  map<int,double> D_e, map<int,double> D_s, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    LWEchal* lwechal = gen_LWE_instance_with_input_distribution( n, q, m, D_e, D_s, params->verbose);
    vector<double>  l = gen_simulated_gso(lwechal->dim, lwechal->dvol);
    double slope = get_current_slope(l,0,lwechal->dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


int main(){

    vector<tuple<int,int,int>> strategy;
    map<int,double> D_e, D_s;
    int n, m , q, eta;
    double alpha;
    Params* params = new Params;

    params->worst_case = false;
    params->cost_model = 1;
    params->theo_pnjbkz_d4f = 2;
    params->theo_pump_d4f = 2;
    params->print_Gcums = true;
    params->list_decoding = "agps20"; //"matzov22";

    // Kyber-512 round-3 parameters
    printf("============= Kyber-512, list_decoding = agps20\n");
    n = 512, m = 512, q = 3329;
    D_s = build_centered_binomial_law(3);
    D_e = D_s;
    strategy = {{50,1,1},{51,1,1},{52,1,1},{53,1,1},{54,1,1},{55,1,1},{56,1,1},{57,1,1},{58,1,1},{59,1,1},{60,1,1},{61,1,1},{62,1,1},{63,1,1},{64,1,1},{65,1,1},{66,1,1},{67,1,1},{68,1,1},{69,1,1},{70,1,1},{71,1,1},{72,1,1},{73,1,1},{74,1,1},{75,1,1},{76,1,1},{77,1,1},{78,1,1},{79,7,1},{79,4,1},{80,7,1},{80,4,1},{81,7,1},{82,7,1},{82,4,1},{83,7,1},{83,4,1},{84,7,1},{84,4,1},{85,7,1},{85,4,1},{86,7,1},{86,4,1},{87,7,1},{87,4,1},{88,7,1},{88,4,1},{89,7,1},{89,4,1},{90,7,1},{90,4,1},{91,7,1},{91,4,1},{92,7,1},{92,4,1},{93,7,1},{93,4,1},{94,7,1},{94,4,1},{95,7,1},{95,4,1},{96,7,1},{97,7,1},{97,4,1},{98,7,1},{98,4,1},{99,7,1},{99,4,1},{100,7,1},{100,4,1},{101,7,1},{101,4,1},{102,7,1},{102,4,1},{103,7,1},{103,4,1},{104,7,1},{104,4,1},{105,7,1},{105,4,1},{106,7,1},{106,4,1},{107,7,1},{107,4,1},{108,7,1},{108,4,1},{109,7,1},{109,4,1},{110,7,1},{111,7,1},{111,4,1},{112,7,1},{112,4,1},{113,7,1},{113,4,1},{114,7,1},{114,4,1},{115,7,1},{115,4,1},{116,7,1},{116,4,1},{117,7,1},{117,4,1},{118,7,1},{118,4,1},{119,7,1},{119,4,1},{120,7,1},{120,4,1},{121,7,1},{121,4,1},{122,7,1},{122,4,1},{123,4,1},{125,4,1},{126,4,1},{127,4,1},{128,4,1},{129,4,1},{130,4,1},{132,7,1},{132,4,1},{133,7,1},{133,4,1},{134,4,1},{135,4,1},{136,4,1},{138,4,1},{139,4,1},{140,4,1},{141,4,1},{142,4,1},{143,4,1},{144,4,1},{145,4,1},{146,4,1},{147,4,1},{148,4,1},{149,4,1},{150,4,1},{152,4,1},{153,4,1},{154,4,1},{155,4,1},{156,4,1},{157,4,1},{158,4,1},{159,4,1},{160,4,1},{161,4,1},{162,4,1},{163,4,1},{164,4,1},{165,4,1},{167,4,1},{168,4,1},{169,4,1},{170,4,1},{171,4,1},{172,4,1},{173,4,1},{174,4,1},{175,4,1},{176,4,1},{178,4,1},{179,4,1},{181,4,1},{182,4,1},{183,4,1},{184,4,1},{185,4,1},{186,4,1},{187,4,1},{188,4,1},{189,4,1},{190,4,1},{192,4,1},{193,4,1},{195,4,1},{196,4,1},{197,4,1},{198,4,1},{200,4,1},{201,4,1},{202,4,1},{203,4,1},{205,4,1},{209,4,1},{210,4,1},{211,4,1},{212,4,1},{213,4,1},{215,4,1},{216,4,1},{217,4,1},{219,4,1},{221,4,1},{222,4,1},{224,4,1},{225,4,1},{227,4,1},{228,4,1},{230,4,1},{232,4,1},{233,4,1},{235,4,1},{237,4,1},{239,4,1},{240,4,1},{242,4,1},{244,4,1},{246,4,1},{248,4,1},{249,4,1},{251,4,1},{253,4,1},{255,4,1},{257,4,1},{259,4,1},{261,4,1},{263,4,1},{265,4,1},{268,4,1},{270,4,1},{272,4,1},{274,4,1},{276,4,1},{278,4,1},{281,4,1},{284,4,1},{285,4,1},{288,4,1},{290,4,1},{292,4,1},{295,4,1},{299,4,1},{300,4,1},{303,4,1},{306,4,1},{309,4,1},{311,4,1},{314,4,1},{317,4,1},{319,4,1},{323,4,1},{326,4,1},{330,4,1},{332,4,1},{335,4,1},{339,4,1},{341,4,1},{345,4,1},{348,4,1},{352,4,1},{355,4,1},{359,4,1},{362,4,1},{365,4,1},{369,4,1},{373,4,1},{377,4,1},{381,4,1},{385,4,1},{393,4,1},{394,4,1},{398,4,1},{402,4,1},{409,4,1}};
    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);



    params->list_decoding = "matzov22";
    // Kyber-512 round-3 parameters
    printf("============= Kyber-512, list_decoding = matzov22\n");
    strategy ={{55,7,1},{55,4,1},{56,7,1},{56,4,1},{57,7,1},{57,4,1},{58,7,1},{58,4,1},{59,7,1},{59,4,1},{60,7,1},{60,4,1},{61,7,1},{61,4,1},{62,7,1},{62,4,1},{63,7,1},{63,4,1},{64,7,1},{64,4,1},{65,7,1},{66,7,1},{66,4,1},{67,7,1},{67,4,1},{68,7,1},{68,4,1},{69,7,1},{69,4,1},{70,7,1},{70,4,1},{71,7,1},{71,4,1},{72,7,1},{72,4,1},{73,7,1},{73,4,1},{74,7,1},{74,4,1},{75,7,1},{75,4,1},{76,7,1},{76,4,1},{77,7,1},{77,4,1},{78,7,1},{78,4,1},{79,7,1},{79,4,1},{80,7,1},{80,4,1},{81,7,1},{82,7,1},{82,4,1},{83,7,1},{83,4,1},{84,7,1},{84,4,1},{85,7,1},{85,4,1},{86,7,1},{86,4,1},{87,7,1},{87,4,1},{88,7,1},{88,4,1},{89,7,1},{89,4,1},{90,7,1},{90,4,1},{91,7,1},{91,4,1},{92,7,1},{92,4,1},{93,7,1},{93,4,1},{94,7,1},{94,4,1},{95,7,1},{95,4,1},{96,7,1},{97,7,1},{97,4,1},{98,7,1},{98,4,1},{99,7,1},{99,4,1},{100,7,1},{100,4,1},{101,7,1},{101,4,1},{102,7,1},{102,4,1},{103,7,1},{103,4,1},{104,7,1},{104,4,1},{105,7,1},{105,4,1},{106,7,1},{106,4,1},{107,7,1},{107,4,1},{108,7,1},{108,4,1},{109,7,1},{109,4,1},{110,7,1},{111,7,1},{111,4,1},{112,7,1},{112,4,1},{113,7,1},{113,4,1},{114,7,1},{114,4,1},{115,7,1},{115,4,1},{116,7,1},{116,4,1},{117,7,1},{117,4,1},{118,7,1},{118,4,1},{119,7,1},{120,7,1},{120,4,1},{121,7,1},{121,4,1},{122,4,1},{123,7,1},{123,4,1},{125,4,1},{126,4,1},{127,4,1},{128,4,1},{129,4,1},{130,4,1},{132,7,1},{132,4,1},{133,7,1},{133,4,1},{134,4,1},{135,4,1},{136,4,1},{138,4,1},{139,4,1},{140,4,1},{141,4,1},{142,4,1},{143,4,1},{144,4,1},{145,4,1},{146,4,1},{147,4,1},{148,4,1},{149,4,1},{150,4,1},{152,4,1},{153,4,1},{154,4,1},{155,4,1},{156,4,1},{157,4,1},{158,4,1},{159,4,1},{160,4,1},{161,4,1},{162,4,1},{163,4,1},{164,4,1},{165,4,1},{167,4,1},{168,4,1},{169,4,1},{170,4,1},{171,4,1},{172,4,1},{173,4,1},{174,4,1},{175,4,1},{176,4,1},{177,4,1},{178,4,1},{179,4,1},{181,4,1},{182,4,1},{183,4,1},{184,4,1},{185,4,1},{187,4,1},{188,4,1},{189,4,1},{190,4,1},{191,4,1},{192,4,1},{195,4,1},{196,4,1},{197,4,1},{198,4,1},{199,4,1},{201,4,1},{202,4,1},{203,4,1},{204,4,1},{206,4,1},{207,4,1},{209,4,1},{210,4,1},{211,4,1},{213,4,1},{214,4,1},{216,4,1},{217,4,1},{219,4,1},{220,4,1},{222,4,1},{224,4,1},{226,4,1},{227,4,1},{228,4,1},{230,4,1},{232,4,1},{234,4,1},{235,4,1},{239,4,1},{240,4,1},{241,4,1},{243,4,1},{245,4,1},{247,4,1},{249,4,1},{251,4,1},{253,4,1},{254,4,1},{257,4,1},{258,4,1},{261,4,1},{262,4,1},{265,4,1},{268,4,1},{269,4,1},{271,4,1},{273,4,1},{276,4,1},{278,4,1},{280,4,1},{282,4,1},{284,4,1},{287,4,1},{289,4,1},{291,4,1},{294,4,1},{297,4,1},{299,4,1},{301,4,1},{304,4,1},{307,4,1},{310,4,1},{314,4,1},{315,4,1},{319,4,1},{322,4,1},{325,4,1},{327,4,1},{331,4,1},{333,4,1},{337,4,1},{340,4,1},{345,4,1},{348,4,1},{351,4,1},{355,4,1},{361,4,1},{362,4,1},{366,4,1},{370,4,1},{374,4,1},{378,4,1},{382,4,1},{385,4,1},{389,4,1},{394,4,1},{398,4,1},{402,4,1},{409,4,1}};
    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);



    params->list_decoding = "agps20";
    printf("============= Kyber-1024, list-decoding = agps20\n");
    n = 1024, m = 1024, q = 3329;
    D_s = build_centered_binomial_law(2);
    D_e = D_s;

    strategy = {{50,1,1},{51,1,1},{52,1,1},{53,1,1},{54,1,1},{55,1,1},{56,1,1},{57,1,1},{58,1,1},{59,1,1},{60,1,1},{61,1,1},{62,1,1},{63,1,1},{64,1,1},{65,1,1},{66,1,1},{67,1,1},{68,1,1},{69,1,1},{70,1,1},{71,1,1},{72,1,1},{73,1,1},{74,1,1},{75,1,1},{76,1,1},{77,1,1},{78,1,1},{79,1,1},{80,1,1},{81,1,1},{82,1,1},{83,1,1},{84,1,1},{85,1,1},{86,1,1},{87,1,1},{88,1,1},{89,1,1},{90,1,1},{91,1,1},{92,1,1},{93,1,1},{94,1,1},{95,1,1},{96,1,1},{97,1,1},{98,1,1},{99,1,1},{100,1,1},{101,1,1},{102,1,1},{103,1,1},{104,1,1},{105,1,1},{106,1,1},{107,1,1},{108,1,1},{109,1,1},{110,1,1},{111,1,1},{112,1,1},{113,1,1},{114,1,1},{115,1,1},{116,1,1},{117,1,1},{118,1,1},{119,1,1},{120,1,1},{121,1,1},{122,1,1},{123,1,1},{124,1,1},{125,1,1},{126,1,1},{127,1,1},{128,1,1},{129,1,1},{130,1,1},{131,1,1},{132,1,1},{133,1,1},{134,1,1},{135,1,1},{136,1,1},{137,1,1},{138,1,1},{139,1,1},{140,1,1},{141,1,1},{142,1,1},{143,1,1},{144,1,1},{145,1,1},{146,1,1},{147,1,1},{148,1,1},{149,1,1},{150,1,1},{151,1,1},{152,1,1},{153,1,1},{154,1,1},{155,1,1},{156,1,1},{157,1,1},{158,1,1},{159,1,1},{160,1,1},{161,1,1},{162,1,1},{163,1,1},{164,1,1},{165,1,1},{166,1,1},{167,1,1},{168,1,1},{169,1,1},{170,1,1},{171,1,1},{172,1,1},{173,1,1},{174,1,1},{175,1,1},{176,1,1},{177,1,1},{178,1,1},{179,1,1},{180,1,1},{181,1,1},{182,1,1},{183,1,1},{184,1,1},{185,1,1},{186,1,1},{187,1,1},{188,1,1},{189,1,1},{190,1,1},{191,1,1},{192,1,1},{193,1,1},{194,1,1},{195,1,1},{196,1,1},{197,1,1},{198,1,1},{199,1,1},{200,1,1},{201,1,1},{202,1,1},{203,1,1},{204,1,1},{205,1,1},{206,1,1},{207,1,1},{208,1,1},{209,1,1},{210,1,1},{211,1,1},{212,1,1},{213,1,1},{214,1,1},{215,1,1},{216,1,1},{217,1,1},{218,1,1},{219,1,1},{220,1,1},{221,1,1},{222,1,1},{223,1,1},{224,1,1},{225,1,1},{226,1,1},{227,1,1},{228,1,1},{229,1,1},{230,1,1},{231,1,1},{232,1,1},{233,1,1},{234,1,1},{235,1,1},{236,1,1},{237,1,1},{238,1,1},{239,1,1},{240,1,1},{241,1,1},{242,1,1},{243,1,1},{244,1,1},{245,1,1},{246,1,1},{247,1,1},{248,1,1},{249,1,1},{250,1,1},{251,1,1},{252,1,1},{253,1,1},{254,1,1},{255,1,1},{256,1,1},{257,1,1},{258,1,1},{259,1,1},{260,1,1},{261,1,1},{262,1,1},{263,1,1},{264,1,1},{265,1,1},{266,1,1},{267,1,1},{268,1,1},{269,1,1},{270,1,1},{271,1,1},{272,1,1},{273,1,1},{274,1,1},{275,1,1},{276,1,1},{277,1,1},{278,1,1},{279,1,1},{280,1,1},{281,1,1},{282,1,1},{283,1,1},{284,1,1},{285,1,1},{286,1,1},{287,1,1},{288,1,1},{289,1,1},{290,1,1},{291,1,1},{292,1,1},{293,1,1},{294,1,1},{295,1,1},{296,1,1},{297,1,1},{298,1,1},{299,1,1},{300,1,1},{301,1,1},{302,1,1},{303,1,1},{304,1,1},{305,1,1},{306,1,1},{307,1,1},{308,1,1},{309,1,1},{310,1,1},{311,1,1},{312,1,1},{313,1,1},{314,1,1},{315,1,1},{316,1,1},{317,1,1},{318,1,1},{319,1,1},{320,1,1},{321,1,1},{322,1,1},{323,1,1},{324,1,1},{325,1,1},{326,1,1},{327,1,1},{328,1,1},{329,1,1},{330,1,1},{331,1,1},{332,1,1},{333,1,1},{334,1,1},{335,1,1},{336,1,1},{337,1,1},{338,1,1},{339,1,1},{340,1,1},{341,1,1},{342,1,1},{343,1,1},{344,1,1},{345,1,1},{346,1,1},{347,1,1},{348,1,1},{349,1,1},{350,1,1},{351,1,1},{352,1,1},{353,1,1},{354,1,1},{355,1,1},{356,1,1},{357,1,1},{358,1,1},{359,1,1},{360,1,1},{361,1,1},{362,1,1},{363,1,1},{364,1,1},{365,1,1},{366,1,1},{367,1,1},{368,1,1},{369,1,1},{370,1,1},{371,1,1},{372,1,1},{373,1,1},{374,1,1},{375,1,1},{376,1,1},{377,1,1},{378,1,1},{379,1,1},{380,1,1},{381,1,1},{382,1,1},{383,1,1},{384,1,1},{385,1,1},{386,1,1},{387,1,1},{388,1,1},{389,1,1},{390,1,1},{391,1,1},{392,1,1},{393,1,1},{394,1,1},{395,1,1},{396,1,1},{397,1,1},{398,1,1},{399,1,1},{400,1,1},{401,1,1},{402,1,1},{403,1,1},{404,1,1},{405,1,1},{406,1,1},{407,1,1},{408,1,1},{409,1,1},{410,1,1},{411,1,1},{412,1,1},{413,1,1},{414,1,1},{415,1,1},{416,1,1},{417,1,1},{418,1,1},{419,1,1},{420,1,1},{421,1,1},{422,1,1},{423,1,1},{424,1,1},{425,1,1},{426,1,1},{427,1,1},{428,1,1},{429,1,1},{430,1,1},{431,1,1},{432,1,1},{433,1,1},{434,1,1},{435,1,1},{436,1,1},{437,1,1},{438,1,1},{439,1,1},{440,1,1},{441,1,1},{442,1,1},{443,1,1},{444,1,1},{445,1,1},{446,1,1},{447,1,1},{448,1,1},{449,1,1},{450,1,1},{451,1,1},{452,1,1},{453,1,1},{454,1,1},{455,1,1},{456,1,1},{457,1,1},{458,1,1},{459,1,1},{460,1,1},{461,1,1},{462,1,1},{463,1,1},{464,1,1},{465,1,1},{466,1,1},{467,1,1},{468,1,1},{469,1,1},{470,1,1},{471,1,1},{472,1,1},{473,1,1},{474,1,1},{475,1,1},{476,1,1},{477,1,1},{478,1,1},{479,1,1},{480,1,1},{481,1,1},{482,1,1},{483,1,1},{484,1,1},{485,1,1},{486,1,1},{487,1,1},{488,1,1},{489,1,1},{490,1,1},{491,1,1},{492,1,1},{493,1,1},{494,1,1},{495,1,1},{496,1,1},{497,1,1},{498,1,1},{499,1,1},{500,1,1},{501,1,1},{502,1,1},{503,1,1},{504,1,1},{505,1,1},{506,1,1},{507,1,1},{508,1,1},{509,1,1},{510,1,1},{511,1,1},{512,1,1},{513,1,1},{514,1,1},{515,1,1},{516,1,1},{517,1,1},{518,1,1},{519,1,1},{520,1,1},{521,1,1},{522,1,1},{523,1,1},{524,1,1},{525,1,1},{526,1,1},{527,1,1},{528,1,1},{529,1,1},{530,1,1},{531,1,1},{532,1,1},{533,1,1},{534,1,1},{535,1,1},{536,1,1},{537,1,1},{538,1,1},{539,1,1},{540,1,1},{541,1,1},{542,1,1},{543,1,1},{544,1,1},{545,1,1},{546,1,1},{547,1,1},{548,1,1},{549,1,1},{550,1,1},{551,1,1},{552,1,1},{553,1,1},{554,1,1},{555,1,1},{556,1,1},{557,1,1},{558,1,1},{559,1,1},{560,1,1},{581,4,1},{587,4,1},{593,4,1},{601,4,1},{609,4,1},{616,4,1},{623,4,1},{632,4,1},{639,4,1},{648,4,1},{656,4,1},{664,4,1},{673,4,1},{682,4,1},{691,4,1},{700,4,1},{711,4,1},{720,4,1},{730,4,1},{741,4,1},{751,4,1},{762,4,1},{773,4,1},{786,4,1},{797,4,1},{810,4,1},{822,4,1},{836,4,1},{850,4,1},{863,4,1},{878,4,1},{892,4,1}};
    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);
    
    params->list_decoding = "matzov22";
    printf("============= Kyber-1024, list_decoding = matzov22\n");

    strategy = {{50,1,1},{51,1,1},{52,1,1},{53,1,1},{54,1,1},{55,1,1},{56,1,1},{57,1,1},{58,1,1},{59,1,1},{60,1,1},{61,1,1},{62,1,1},{63,1,1},{64,1,1},{65,1,1},{66,1,1},{67,1,1},{68,1,1},{69,1,1},{70,1,1},{71,1,1},{72,1,1},{73,1,1},{74,1,1},{75,1,1},{76,1,1},{77,1,1},{78,1,1},{79,1,1},{80,1,1},{81,1,1},{82,1,1},{83,1,1},{84,1,1},{85,1,1},{86,1,1},{87,1,1},{88,1,1},{89,1,1},{90,1,1},{91,1,1},{92,1,1},{93,1,1},{94,1,1},{95,1,1},{96,1,1},{97,1,1},{98,1,1},{99,1,1},{100,1,1},{101,1,1},{102,1,1},{103,1,1},{104,1,1},{105,1,1},{106,1,1},{107,1,1},{108,1,1},{109,1,1},{110,1,1},{111,1,1},{112,1,1},{113,1,1},{114,1,1},{115,1,1},{116,1,1},{117,1,1},{118,1,1},{119,1,1},{120,1,1},{121,1,1},{122,1,1},{123,1,1},{124,1,1},{125,1,1},{126,1,1},{127,1,1},{128,1,1},{129,1,1},{130,1,1},{131,1,1},{132,1,1},{133,1,1},{134,1,1},{135,1,1},{136,1,1},{137,1,1},{138,1,1},{139,1,1},{140,1,1},{141,1,1},{142,1,1},{143,1,1},{144,1,1},{145,1,1},{146,1,1},{147,1,1},{148,1,1},{149,1,1},{150,1,1},{151,1,1},{152,1,1},{153,1,1},{154,1,1},{155,1,1},{156,1,1},{157,1,1},{158,1,1},{159,1,1},{160,1,1},{161,1,1},{162,1,1},{163,1,1},{164,1,1},{165,1,1},{166,1,1},{167,1,1},{168,1,1},{169,1,1},{170,1,1},{171,1,1},{172,1,1},{173,1,1},{174,1,1},{175,1,1},{176,1,1},{177,1,1},{178,1,1},{179,1,1},{180,1,1},{181,1,1},{182,1,1},{183,1,1},{184,1,1},{185,1,1},{186,1,1},{187,1,1},{188,1,1},{189,1,1},{190,1,1},{191,1,1},{192,1,1},{193,1,1},{194,1,1},{195,1,1},{196,1,1},{197,1,1},{198,1,1},{199,1,1},{200,1,1},{201,1,1},{202,1,1},{203,1,1},{204,1,1},{205,1,1},{206,1,1},{207,1,1},{208,1,1},{209,1,1},{210,1,1},{211,1,1},{212,1,1},{213,1,1},{214,1,1},{215,1,1},{216,1,1},{217,1,1},{218,1,1},{219,1,1},{220,1,1},{221,1,1},{222,1,1},{223,1,1},{224,1,1},{225,1,1},{226,1,1},{227,1,1},{228,1,1},{229,1,1},{230,1,1},{231,1,1},{232,1,1},{233,1,1},{234,1,1},{235,1,1},{236,1,1},{237,1,1},{238,1,1},{239,1,1},{240,1,1},{241,1,1},{242,1,1},{243,1,1},{244,1,1},{245,1,1},{246,1,1},{247,1,1},{248,1,1},{249,1,1},{250,1,1},{251,1,1},{252,1,1},{253,1,1},{254,1,1},{255,1,1},{256,1,1},{257,1,1},{258,1,1},{259,1,1},{260,1,1},{261,1,1},{262,1,1},{263,1,1},{264,1,1},{265,1,1},{266,1,1},{267,1,1},{268,1,1},{269,1,1},{270,1,1},{271,1,1},{272,1,1},{273,1,1},{274,1,1},{275,1,1},{276,1,1},{277,1,1},{278,1,1},{279,1,1},{280,1,1},{281,1,1},{282,1,1},{283,1,1},{284,1,1},{285,1,1},{286,1,1},{287,1,1},{288,1,1},{289,1,1},{290,1,1},{291,1,1},{292,1,1},{293,1,1},{294,1,1},{295,1,1},{296,1,1},{297,1,1},{298,1,1},{299,1,1},{300,1,1},{301,1,1},{302,1,1},{303,1,1},{304,1,1},{305,1,1},{306,1,1},{307,1,1},{308,1,1},{309,1,1},{310,1,1},{311,1,1},{312,1,1},{313,1,1},{314,1,1},{315,1,1},{316,1,1},{317,1,1},{318,1,1},{319,1,1},{320,1,1},{321,1,1},{322,1,1},{323,1,1},{324,1,1},{325,1,1},{326,1,1},{327,1,1},{328,1,1},{329,1,1},{330,1,1},{331,1,1},{332,1,1},{333,1,1},{334,1,1},{335,1,1},{336,1,1},{337,1,1},{338,1,1},{339,1,1},{340,1,1},{341,1,1},{342,1,1},{343,1,1},{344,1,1},{345,1,1},{346,1,1},{347,1,1},{348,1,1},{349,1,1},{350,1,1},{351,1,1},{352,1,1},{353,1,1},{354,1,1},{355,1,1},{356,1,1},{357,1,1},{358,1,1},{359,1,1},{360,1,1},{361,1,1},{362,1,1},{363,1,1},{364,1,1},{365,1,1},{366,1,1},{367,1,1},{368,1,1},{369,1,1},{370,1,1},{371,1,1},{372,1,1},{373,1,1},{374,1,1},{375,1,1},{376,1,1},{377,1,1},{378,1,1},{379,1,1},{380,1,1},{381,1,1},{382,1,1},{383,1,1},{384,1,1},{385,1,1},{386,1,1},{387,1,1},{388,1,1},{389,1,1},{390,1,1},{391,1,1},{392,1,1},{393,1,1},{394,1,1},{395,1,1},{396,1,1},{397,1,1},{398,1,1},{399,1,1},{400,1,1},{401,1,1},{402,1,1},{403,1,1},{404,1,1},{405,1,1},{406,1,1},{407,1,1},{408,1,1},{409,1,1},{410,1,1},{411,1,1},{412,1,1},{413,1,1},{414,1,1},{415,1,1},{416,1,1},{417,1,1},{418,1,1},{419,1,1},{420,1,1},{421,1,1},{422,1,1},{423,1,1},{424,1,1},{425,1,1},{426,1,1},{427,1,1},{428,1,1},{429,1,1},{430,1,1},{431,1,1},{432,1,1},{433,1,1},{434,1,1},{435,1,1},{436,1,1},{437,1,1},{438,1,1},{439,1,1},{440,1,1},{441,1,1},{442,1,1},{443,1,1},{444,1,1},{445,1,1},{446,1,1},{447,1,1},{448,1,1},{449,1,1},{450,1,1},{451,1,1},{452,1,1},{453,1,1},{454,1,1},{455,1,1},{456,1,1},{457,1,1},{458,1,1},{459,1,1},{460,1,1},{461,1,1},{462,1,1},{463,1,1},{464,1,1},{465,1,1},{466,1,1},{467,1,1},{468,1,1},{469,1,1},{470,1,1},{471,1,1},{472,1,1},{473,1,1},{474,1,1},{475,1,1},{476,1,1},{477,1,1},{478,1,1},{479,1,1},{497,4,1},{502,4,1},{507,4,1},{513,4,1},{519,4,1},{524,4,1},{530,4,1},{535,4,1},{541,4,1},{547,4,1},{553,4,1},{559,4,1},{566,4,1},{573,4,1},{580,4,1},{587,4,1},{593,4,1},{601,4,1},{609,4,1},{616,4,1},{623,4,1},{632,4,1},{639,4,1},{648,4,1},{656,4,1},{664,4,1},{673,4,1},{682,4,1},{691,4,1},{700,4,1},{711,4,1},{720,4,1},{730,4,1},{741,4,1},{751,4,1},{762,4,1},{773,4,1},{786,4,1},{797,4,1},{810,4,1},{822,4,1},{836,4,1},{850,4,1},{863,4,1},{878,4,1},{892,4,1}};
    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);



    
    n = 40, alpha = 0.025;
    strategy = {{50,1,1},{51,1,1},{52,1,1},{53,1,1},{54,1,1},{55,1,1},{56,1,1},{57,1,1},{58,1,1},{59,1,1},{60,1,1},{61,1,1},{62,1,1},{63,1,1},{64,1,1},{65,1,1},{66,1,1},{67,1,1},{68,1,1},{69,1,1},{70,1,1},{71,1,1},{72,1,1},{73,1,1},{74,1,1},{75,1,1},{76,1,1},{77,1,1},{78,1,1},{87,4,1},{92,4,1},{98,4,1}};
    params->list_decoding = "agps20";
    printf("n = %d, alpha = %1.3f, list_decoding = agps20\n", n, alpha);
    test_lwechal_from_original_instance(params, n, alpha, strategy);

    params->list_decoding = "matzov22";
    strategy = {{55,7,3},{55,4,3},{56,4,1},{66,4,2},{69,4,1},{73,4,1},{77,4,1},{83,4,1},{89,4,1},{97,4,1}};
    printf("n = %d, alpha = %1.3f, list_decoding = matzov22\n", n, alpha);
    test_lwechal_from_original_instance(params, n, alpha, strategy);

    n = 80, alpha = 0.005;
    strategy = {{50,1,1},{51,1,1},{52,1,1},{53,1,1},{54,1,1},{55,1,1},{56,1,1},{57,1,1},{58,1,1},{59,1,1},{60,1,1},{61,1,1},{62,1,1},{63,1,1},{64,1,1},{65,1,1},{66,1,1},{67,1,1},{78,1,5},{85,4,1},{88,4,1},{89,4,1},{97,4,2},{100,4,1},{103,4,1},{107,4,1},{111,4,1}};
    params->list_decoding = "agps20";
    printf("n = %d, alpha = %1.3f, list_decoding = agps20\n", n, alpha);
    test_lwechal_from_original_instance(params, n, alpha, strategy);

    params->list_decoding = "matzov22";
    strategy = {{55,7,5},{55,4,5},{56,4,5},{58,4,1},{59,4,1},{60,4,1},{66,4,3},{68,4,1},{70,4,1},{72,4,1},{74,4,1},{75,4,1},{82,4,2},{84,4,1},{87,4,1},{89,4,1},{92,4,1},{97,4,1},{98,4,1},{102,4,1},{105,4,1},{111,4,1}};
    printf("n = %d, alpha = %1.3f, list_decoding = matzov22\n", n, alpha);
    test_lwechal_from_original_instance(params, n, alpha, strategy);




}