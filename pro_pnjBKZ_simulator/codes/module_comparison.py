#!/usr/bin/env python
# -*- coding: utf-8 -*-
####
#
#   Copyright (C) 2018-2021 Team G6K
#
#   This file is part of G6K. G6K is free software:
#   you can redistribute it and/or modify it under the terms of the
#   GNU General Public License as published by the Free Software Foundation,
#   either version 2 of the License, or (at your option) any later version.
#
#   G6K is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with G6K. If not, see <http://www.gnu.org/licenses/>.
#
####


"""
LWE Challenge Solving Command Line Client
"""

from __future__ import absolute_import
from __future__ import print_function
import copy
import re
import sys
import time

from collections import OrderedDict # noqa
from math import log

from fpylll import BKZ as fplll_bkz
from fpylll.algorithms.bkz2 import BKZReduction
from fpylll.tools.quality import basis_quality
from fpylll.util import gaussian_heuristic as gh
from numpy import True_

from g6k.algorithms.bkz import pump_n_jump_bkz_tour
from g6k.algorithms.pump import pump
#from g6k.algorithms.pump_cpu import pump
from g6k.siever import Siever
from g6k.utils.util import load_svpchallenge_and_randomize
from g6k.siever_params import SieverParams
from g6k.utils.cli import parse_args, run_all, pop_prefixed_params
from g6k.utils.stats import SieveTreeTracer, dummy_tracer
from g6k.utils.util import load_lwe_challenge,load_lwe_challenge_mid

# from g6k.utils.lwe_estimation import gsa_params, primal_lattice_basis
from g6k.utils.lwe_estimation_old import gsa_params, primal_lattice_basis
from pro_pnjBKZ_simulator.codes.util import get_pump_time, dim4free_wrapper, default_dim4free_fun,show_pump_gs_figure,compute_square_error
from pro_pnjBKZ_simulator.codes.pump_estimation import pump_estimation1,pump_estimation2
from pro_pnjBKZ_simulator.codes.pump_simulator import calculate_sim_log_gs_lengths_for_pump
from pro_pnjBKZ_simulator.codes.pnjbkz_simulator import simulatepnjbkzloop
import matplotlib.pyplot as plt
import os

def gen_lwes():
    ns = [40,45,50,55,60,65,70,75,80,85,90]
    alphas = ["0.005","0.010","0.015","0.020","0.025","0.030","0.035"]
    
    unsolved_lwes = []
    for i in range(7):
        if(i<5):
            unsolved_lwes.append((ns[i],alphas[-1-i]))
        if(i==5):
            unsolved_lwes.append((75,"0.010"))
        if(i==6):
            unsolved_lwes.append((90,"0.005"))
    
    solved_lwes = []
    for i in range(6):
        if(i==0):
            for j in range(ns.index(90)):
                solved_lwes.append((ns[j],alphas[0]))
        if(i==1):
            for j in range(ns.index(75)):
                solved_lwes.append((ns[j],alphas[1]))
        if(i>=2):
            k = i-2
            for j in range(ns.index(60)-k):
                solved_lwes.append((ns[j],alphas[i]))
    return sorted(solved_lwes+unsolved_lwes)




def gen_original_gs(n,alpha, goal_margin):
    """
    Run the primal attack against Darmstadt LWE instance (n, alpha).

    :param n: the dimension of the LWE-challenge secret
    :param alpha: the noise rate of the LWE-challenge
    """

    A, c, q = load_lwe_challenge(n=n, alpha=alpha)
    
    #print("-------------------------")
    #print("Primal attack, LWE challenge n=%d, alpha=%.4f" % (n, alpha))
    m = None
    if m is None:
        try:
            min_cost_param = gsa_params(n=A.ncols, alpha=alpha, q=q,
                                        decouple=True)
            (b, s, m) = min_cost_param
        except TypeError:
            raise TypeError("No winning parameters.")
    else:
        try:
            min_cost_param = gsa_params(n=A.ncols, alpha=alpha, q=q,
                                        decouple=True)
            (b, s, _) = min_cost_param
        except TypeError:
            raise TypeError("No winning parameters.")
    #print("Chose %d samples. Predict solution at bkz-%d + svp-%d" % (m, b, s))
    #print()

    # no use in having a very small b
    b = max(b, s-65)
    
    
    B = primal_lattice_basis(A, c, q, m=m) #debug

    params = None
    g6k = Siever(B, params)
    #print("GSO precision: ", g6k.M.float_type)

    d = g6k.full_n

    g6k.lll(0, g6k.full_n)
    #slope = basis_quality(g6k.M)["/"]
    # print("Intial Slope = %.5f\n" % slope)

    log_rr0 = [log(g6k.M.get_r(i, i)) for i in range(d)]


    target_norm = goal_margin * (alpha*q)**2 * m + 1

    return b,s,target_norm,log_rr0,0,q
    
def gen_svp_instance(d):
    params = SieverParams()
    A, bkz = load_svpchallenge_and_randomize(d)
    g6k = Siever(A, params)

    return [g6k.M.get_r(i, i) for i in range(d)]

# threads = 32, gpus = 2, Known maxT, find the dimension(beta-f).
def get_pump_dim(d,T_max):
    for beta in range(d):
        f = dim4free_wrapper(default_dim4free_fun,beta)
        T_pump = get_pump_time(beta - f,d) 
        if T_pump > T_max:
            beta = beta -1
            f = dim4free_wrapper(default_dim4free_fun,beta)
            llb = d - beta
            if beta > 0:
                return llb,beta,f
   

def show_bkz_pump_comparison_figure_for_lwe(dir,log_gs_length0,log_gs_length,n,alpha,blocksize,llb,beta,f):
    with plt.style.context(['science','ieee']):
        plt.figure(figsize=(5, 3), dpi=600)
        d  = len(log_gs_length)
        function1 = "llb=%d"%llb
        function3 = "gs after pnj-BKZ-%d" %blocksize
        function4 = "gs after pump(%d,%d,%d)"%(llb,beta,f)
        plt.scatter([_+1 for _ in range(d)],log_gs_length0,marker=".",color='black',label = function3)
        plt.scatter([_+1 for _ in range(d)],log_gs_length,marker=".",color='blue',label = function4)
        plt.scatter(llb,log_gs_length0[llb],marker=".",color = 'r')
        plt.scatter(llb,log_gs_length[llb],marker=".",color = 'r')
        plt.text(llb,log_gs_length0[llb],(llb,round(log_gs_length0[llb],2)),ha='right', va='top', fontsize=7)
        plt.text(llb,log_gs_length[llb],(llb,round(log_gs_length[llb],2)),ha='right', va='top', fontsize=7)
        # square_error = compute_square_error(log_gs_length0,log_gs_length,1)
        plt.plot([llb,llb], [min(log_gs_length),max(log_gs_length)],label = function1)
        # plt.plot([llb+f,llb+f], [min(log_gs_length),max(log_gs_length)])
        
        # function1 = "llb=%d"%llb
        # function2 = "llb+f=%d"%(llb+f)
        # plt.rcParams.update({'font.size': 10})
        plt.legend([function3,function4])
        plt.title("gs-lengths after pnj-BKZ/Pump in the same time")

        try:
            os.mkdir(dir)
        except FileExistsError:
            pass
        plt.savefig(dir+"(%d,%s).png" %(n,alpha))
        plt.close()


def show_bkz_pump_comparison_figure_for_svp(dir,log_gs_length0,log_gs_length,d,blocksize,llb,beta,f):
    with plt.style.context(['science','ieee']):
        fig,ax = plt.subplots(figsize=(12,6),dpi=600)  
        d  = len(log_gs_length)
        ax.scatter([_+1 for _ in range(d)],log_gs_length0,marker=".")
        ax.scatter([_+1 for _ in range(d)],log_gs_length,marker=".")
        # square_error = compute_square_error(log_gs_length0,log_gs_length,1)
        ax.plot([llb,llb], [min(log_gs_length),max(log_gs_length)])
        # plt.plot([llb+f,llb+f], [min(log_gs_length),max(log_gs_length)])
        function3 = "gs after pnj-BKZ-%d" %blocksize
        function4 = "gs after pump(%d,%d,%d)"%(llb,beta,f)
        function1 = "llb=%d"%llb
        # function2 = "llb+f=%d"%(llb+f)
        plt.rcParams.update({'font.size': 15})
        ax.legend([function3,function4,function1])
        # plt.title("gs-lengths after pnj-BKZ/Pump in the same time")

        try:
            os.mkdir(dir)
        except FileExistsError:
            pass

        plt.xticks(fontsize=15)
        plt.yticks(fontsize=15)
        ax.set_xlabel(r'indices',fontsize = 15)
        ax.set_ylabel(r'$\log \lVert {\bf{b}_j^*}\rVert$',fontsize = 15)
        ax.autoscale(tight=False)
        fig.savefig(dir+"svp-%d.png" %(d))
        plt.close()





#Compare G6K-default mode with two-step mode
#fixed time cost, after a BKZ/Pump in the same fixed time cost
#To prove that the reduced basis quality after BKZ reduction is better than that after a Pump reduction in the same reduction cost.
def BKZ_Pump_comparison1(n,alpha):
    data = gen_original_gs(n,float(alpha), 1.5)
    (ebeta,svp_dim,target_norm,log_rr0,preprocess_cost,q) = data

    d = len(log_rr0)
    log_rr, T_BKZ = simulatepnjbkzloop(log_rr0, ebeta, 1, d,1)
    
    log_FSC_BKZ,llb2,blocksize2,f2 = pump_estimation2(log_rr,q,alpha)
    

    if get_pump_dim(d,T_BKZ) != None:
        llb,beta,f = get_pump_dim(d,T_BKZ)
        log_rr = calculate_sim_log_gs_lengths_for_pump(log_rr0,d,llb,f) 
        log_FSC_pump,llb2,blocksize2,f2 = pump_estimation2(log_rr,q,alpha)
        print((n,alpha,log_FSC_BKZ,log_FSC_pump))
        return (n,alpha,log_FSC_BKZ,log_FSC_pump)
    

#Compare BKZ-only mode with two-step mode
#To prove that in the same time cost, the target norm in the projected lattice after a Pump is shorter than that after a BKZ. 
#Draw gs-lengths picture.
def BKZ_Pump_comparison2(n,alpha):
    dir = "pro_pnjBKZ_simulator/BKZ_Pump_comparison2/"
    # file = open("BKZ_Pump_comparison2.txt",'w')
    data = gen_original_gs(n,float(alpha), 1.5)
    (ebeta,svp_dim,target_norm,log_rr0,preprocess_cost,q) = data

    d = len(log_rr0)
    log_rr1, T_BKZ = simulatepnjbkzloop(log_rr0, ebeta, 1, d,1)
    
    log_FSC_BKZ,llb2,blocksize2,f2 = pump_estimation2(log_rr1,q,alpha)

    # file.write(str(log_rr1)+'\n')
    if get_pump_dim(d,T_BKZ) != None:
        llb,beta,f = get_pump_dim(d,T_BKZ)
        
        log_rr2 = calculate_sim_log_gs_lengths_for_pump(log_rr0,d,llb,f) 
        log_FSC_pump,llb2,blocksize2,f2 = pump_estimation2(log_rr2,q,alpha)
        # file.write(str(log_rr2)+'\n')

        show_bkz_pump_comparison_figure_for_lwe(dir,log_rr1,log_rr2,n,alpha,ebeta,llb,beta,f)
        
        print("T_BKZ = T_pump = %f" %T_BKZ)
        print("BKZ projection:"+str( (llb,log_rr1[llb])))
        print("Pump projection:"+str( (llb,log_rr2[llb])))
        
        return (n,alpha,log_FSC_BKZ,log_FSC_pump)
    # file.close()

def BKZ_Pump_comparison3(d):
    dir = "pro_pnjBKZ_simulator/BKZ_Pump_comparison3/"
    # file = open("BKZ_Pump_comparison2.txt",'w')
    params = SieverParams()
    A, bkz = load_svpchallenge_and_randomize(d)
    g6k = Siever(A, params)
    log_rr0 = [log(g6k.M.get_r(i, i)) for i in range(d)]
    # (ebeta,svp_dim,target_norm,log_rr0,preprocess_cost,q) = data
    ebeta = d//2
    d = len(log_rr0)
    log_rr1, T_BKZ = simulatepnjbkzloop(log_rr0, ebeta, 1, d,1)
    
    log_FSC_BKZ,llb2,blocksize2,f2 = pump_estimation2(log_rr1,q,alpha)
    
    # file.write(str(log_rr1)+'\n')
    if get_pump_dim(d,T_BKZ) != None:
        llb,beta,f = get_pump_dim(d,T_BKZ)
        
        log_rr2 = calculate_sim_log_gs_lengths_for_pump(log_rr0,d,llb,f) 
        log_FSC_pump,llb2,blocksize2,f2 = pump_estimation2(log_rr2,q,alpha)
        # file.write(str(log_rr2)+'\n')
        print(log_FSC_BKZ,log_FSC_pump)

        show_bkz_pump_comparison_figure_for_svp(dir,log_rr1,log_rr2,d,ebeta,llb,beta,f)

        print("T_BKZ = T_pump = %f" %T_BKZ)
        print("BKZ projection:"+str( (llb,log_rr1[llb])))
        print("Pump projection:"+str( (llb,log_rr2[llb])))
        # return (d,log_FSC_BKZ,log_FSC_pump)
    # file.close()

# lwes = gen_lwes()
# comparison_result = []
# for (n,alpha) in lwes:
#     # print(n,alpha)
#     comparison_result.append(BKZ_Pump_comparison2(n,alpha))

# print(comparison_result)

# BKZ_Pump_comparison3(180)
    

# log_rr1 = [14.315066599854838, 14.283368742232135, 14.251592364903846, 14.219734634844038, 14.187792657706641, 14.155763475609788, 14.123682861346559, 14.091706040063993, 14.059714336909657, 14.027680763555122, 13.995564453572293, 13.963350114368374, 13.931040000725964, 13.89862042326769, 13.866127486770939, 13.833512570286874, 13.800795518183236, 13.767939396250128, 13.734995949180988, 13.701914427037206, 13.668706388770385, 13.635361581650923, 13.601889413219329, 13.568283942595308, 13.53453082515459, 13.500645660405588, 13.46660588106906, 13.432421510283959, 13.39806976457195, 13.363573723935477, 13.32891680910198, 13.294091922532296, 13.259088464197298, 13.22391177140478, 13.188575522024827, 13.153060495307237, 13.117391173894909, 13.081523868601067, 13.045472868607547, 13.009240885742265, 12.972806685324244, 12.936199980050649, 12.899380723198359, 12.862373842094296, 12.825188237460953, 12.787807056509116, 12.75021850584367, 12.712442804707191, 12.67449995377137, 12.63651348964407, 12.598607467060091, 12.576030826363398, 12.553341462671863, 12.53053809780676, 12.507619430777918, 12.484584137227593, 12.461430868857217, 12.438158252836336, 12.414764891193114, 12.391249360185638, 12.367610209653389, 12.343845962348059, 12.31995511324295, 12.295936128820113, 12.271787446334388, 12.247507473053442, 12.223094585472825, 12.198547128505131, 12.173863414642161, 12.149041723089066, 12.124080298869343, 12.098977351899455, 12.073731056031905, 12.048339548065464, 12.022800926721139, 11.997113251582599, 11.971274541999426, 11.945282775951762, 11.919135888874665, 11.892831772440488, 11.866368273297514, 11.839743191762949, 11.812954280468317, 11.785999242955231, 11.758875732219352, 11.731581349200274, 11.704113641214986, 11.6764701003324, 11.648648161686317, 11.62064520172414, 11.592458536388405, 11.564085419228112, 11.535523039436715, 11.506768519813411, 11.47781891464423, 11.448671207499288, 11.419322308942311, 11.389769054148399, 11.360008200425805, 11.330036424637248, 11.299850320516107, 11.269446395872599, 11.23882106968478, 11.20797066906904, 11.176891426124392, 11.145579474644732, 11.114030846692826, 11.082241469029636, 11.050207159392242, 11.017923622613324, 10.985386446574934, 10.952591097988948, 10.919532917996321, 10.886207117577001, 10.852608772762071, 10.81873281963948, 10.78457404914447, 10.750127101625631, 10.715386461177404, 10.680346449729754, 10.645001220885753, 10.609344753497938, 10.573370844974455, 10.537073104306556, 10.500444944809358, 10.463479576568853, 10.426169998589033, 10.388508990634676, 10.350489104767082, 10.312102656572637, 10.273341716087232, 10.234198098423382, 10.194663354112048, 10.15472875917722, 10.114385304969145, 10.073623687791596, 10.032434298370449, 9.99080721122563, 9.94873217402646, 9.906198597033162, 9.863195542754706, 9.819711715987967, 9.77573545444535, 9.73660863338864, 9.718851450457459, 9.684820930869975, 9.647051140088138, 9.603599912029713, 9.557955569535757, 9.512524357820787, 9.46510823758865, 9.42256511282046, 9.373238938074957, 9.326529306089547, 9.2746206175187, 9.229713626813725, 9.177715819443593, 9.127175072320284, 9.075092932389214, 9.024172264195299, 8.972304393209319, 8.918323661880573, 8.866348015897188, 8.811126038069487, 8.757132638829173, 8.699850528131485, 8.64558608284373, 8.58888940301704, 8.531052388590124, 8.471584598407317, 8.412674784934255, 8.355479283076003, 8.295471761101915, 8.238664066510598, 8.17567296944948, 8.114455795599723, 8.053429159303063, 7.98929115416023, 7.929051283672799, 7.8631124605394085, 7.800401056942167, 7.738730328797236, 7.674555192212169, 7.608556990781897, 7.545141675114166, 7.484299301668138, 7.440337830308693, 7.413452299159292]
# log_rr2 = [14.756767425993429,14.756767425993429,14.756767425993429,14.756767425993429,14.756767425993429,14.748496761885656,14.712508069193653,14.67651673506596,14.64051995798639,14.604514902349889,14.56849869694977,14.53246843340816,14.496421164547527,14.460353902701133,14.424263617960388,14.388147236357055,14.352001637978438,14.31582365501387,14.279610069730984,14.24335761238062,14.20706295902965,14.17072272932147,14.134333484164648,14.097891723351104,14.061393883106236,14.024836333574855,13.98821537624851,13.95157300128344,13.915092038216098,13.878632019110123,13.842160805374439,13.805629933396679,13.769021168508525,13.732336998091938,13.695561101608549,13.658735912575718,13.621803877511153,13.584788273242138,13.547645377654304,13.510436122279145,13.473100469023684,13.435651951718071,13.398078360714807,13.360390692128716,13.322581825231515,13.284634737270796,13.246567747104756,13.208354133112547,13.170005649160954,13.131495339339734,13.09285037878803,13.054051130037397,13.015089165340813,12.975951937178536,12.936645712560608,12.89718658813721,12.857551836384316,12.817770307342206,12.777790405923861,12.737628989356537,12.697289237577849,12.656746081924252,12.616034578280624,12.575107456521696,12.53399414431971,12.492705127707952,12.451220503233175,12.409526361006641,12.367646567725055,12.325604701108729,12.283546427614258,12.24161783567829,12.216371539810744,12.190980031844296,12.165441410499975,12.139753735361435,12.11391502577826,12.087923259730598,12.061776372653501,12.035472256219323,12.009008757076352,11.982383675541787,11.955594764247154,11.92863972673407,11.90151621599819,11.874221832979114,11.846754124993826,11.819110584111238,11.791288645465155,11.763285685502979,11.735099020167244,11.706725903006948,11.678163523215552,11.649409003592247,11.620459398423067,11.591311691278127,11.56196279272115,11.532409537927238,11.502648684204644,11.472676908416089,11.442490804294948,11.412086879651438,11.38146155346362,11.350611152847877,11.31953190990323,11.288219958423571,11.256671330471667,11.22488195280848,11.192847643171085,11.160564106392165,11.128026930353775,11.095231581767788,11.06217340177516,11.02884760135584,10.995249256540907,10.961373303418316,10.92721453292331,10.892767585404473,10.858026944956245,10.822986933508593,10.78764170466459,10.751985237276774,10.716011328753291,10.679713588085393,10.643085428588195,10.606120060347688,10.568810482367873,10.53114947441352,10.493129588545923,10.454743140351477,10.415982199866074,10.376838582202229,10.337303837890893,10.297369242956062,10.257025788747987,10.216264171570435,10.17507478214929,10.133447695004467,10.091372657805303,10.048839080812002,10.005836026533546,9.962352199766805,9.918375938224186,9.879249117167474,9.861491934236293,9.827461414648809,9.789691623866972,9.746240395808547,9.700596053314591,9.655164841599621,9.607748721367484,9.565205596599293,9.515879421853791,9.469169789868381,9.417261101297534,9.372354110592559,9.320356303222427,9.269815556099118,9.217733416168048,9.166812747974133,9.114944876988153,9.060964145659407,9.008988499676022,8.953766521848321,8.899773122608007,8.842491011910319,8.788226566622564,8.731529886795874,8.673692872368958,8.61422508218615,8.55531526871309,8.498119766854836,8.438112244880749,8.381304550289432,8.318313453228313,8.257096279378557,8.196069643081897,8.131931637939063,8.071691767451634,8.005752944318242,7.943041540721001,7.88137081257607,7.817195675991003,7.751197474560731,7.6877821588929995,7.626939785446972,7.582978314087527,7.556092782938126]
# d = len(log_rr1)
# ebeta = 1
# llb = 0
# beta = 0
# f = 0
# dir = "testLogs/"
# show_bkz_pump_comparison_figure_for_svp(dir,log_rr1,log_rr2,d,ebeta,llb,beta,f)



rr0 = [17593199.0, 17747378.553702828, 18213552.039626822, 16339287.682126224, 14953930.664698647, 16500765.740705414, 16080621.255344603, 14257929.858444678, 14411505.44933656, 14618508.64446146, 13261166.772089202, 12764300.679746108, 12204582.964902963, 11618585.31574599, 11314018.439651612, 10259375.544977166, 10153396.633549444, 9992913.249633173, 8321160.305174665, 8851574.528842356, 8538056.828523446, 8396290.288637383, 8266701.240925262, 7604502.873976746, 7379938.905017687, 7739557.570299928, 6809012.420040822, 6848782.284777216, 6772040.560264805, 6617615.996814541, 6215786.282061103, 6109377.286707844, 5876423.053353531, 5489176.960378364, 5126861.519628496, 5016361.43296781, 4891104.382506222, 4584768.604564314, 4646610.256218404, 4680247.617094945, 4494805.928647405, 4132318.6204508925, 3989569.8826145856, 3739669.9345874893, 3583530.84331322, 3689617.8764515454, 3371326.9786666087, 3343008.857124392, 3190563.880148873, 3123533.313770007, 2868566.060242219, 2711716.449037398, 2829210.453557748, 2595505.126850419, 2394211.774529831, 2274838.0008344217, 2225926.8771465304, 2273640.905816475, 1978405.0296681596, 2074095.7376602811, 2085294.9382543548, 1946208.1633623554, 1951521.9163847163, 1848589.1249970845, 1832648.3334207055, 1656022.1950723666, 1624991.6037994884, 1519639.4449410317, 1445110.419811384, 1463193.6822483237, 1332939.5014129784, 1289192.4540424675, 1186906.8849008798, 1164271.4032091666, 1223416.688228876, 1176068.3338047476, 1140651.6464911452, 1093075.6402209837, 1034789.3171085669, 944960.8844460984, 893953.3883616319, 964110.5894616756, 909184.256690147, 884934.7156422193, 837980.0209533558, 804863.6993480513, 803401.3403766002, 803409.2432588103, 741119.7268399837, 729364.6253990765, 669440.7814453426, 631961.0205060861, 575432.8858370573, 611242.1338421636, 554480.4489072023, 556563.2471336286, 556778.5941092093, 519398.09408909566, 495976.4700729737, 469580.3195201299, 471573.01706790837, 461360.2988319587, 442826.51809411636, 416033.3814202735, 408964.6980912852, 350592.3417822156, 348283.4143657063, 378013.126991413, 351318.22387255635, 343937.00995764666, 327453.02856872074, 323323.43243056606, 290800.8691553662, 273340.6968441876, 265873.7805300861, 250286.90134271912, 260196.5380721711, 258513.0599901351, 243449.0533741261, 220304.29523345875, 219020.4456363878, 184180.7256572751, 186698.63369209607, 178374.92643380357, 182934.626550699, 175179.79184374583, 165659.80219003218, 160407.3686775888, 150851.66888980177, 150358.0468919811, 135159.97040537267, 152651.95541347095, 145982.37439978484, 134487.62636042255, 125194.68821252331, 110229.52884028811, 104821.67800468867, 119678.49773739705, 103454.46644185891, 102438.15900696932, 99369.7142386699, 95787.9595925071, 90671.58978322879, 78360.85896146669, 74876.3234935844, 81898.93893091338, 80613.30706060713, 71444.31305090823, 70524.96704559108, 67806.22649678784, 69783.18723036825, 66546.89945683135, 66449.62895070727, 62427.63705075592, 58915.566781452224, 60160.15326934127, 57481.73895637398, 54322.3017550021, 53271.160912535255, 51583.07106075412, 51399.836769288704, 49008.17757546289, 49240.11045870858, 47421.280382496945, 44941.05162642632, 44321.29003128929, 42115.472636343606, 41564.11076690723, 41118.73913827314, 40213.56933953981, 36778.06831297708, 37558.05348209889, 35481.46657708417, 33780.285445792906, 33704.89567313395, 30663.168335730592, 31434.17559982655, 29941.38648632876, 27940.33658951765, 26315.955614197686, 27450.213486806642, 27277.09892941914, 25269.464738815783, 23738.36996471915, 24303.143812541555, 23001.951354836805, 21510.000416147515, 21501.321990299664, 20883.67363660345, 20337.209333598108, 19471.6476337879, 18596.61919021472, 17325.83129091153, 16586.25176636976, 16883.54989558655, 14887.472026092622, 15584.103187741051, 13856.711885981673, 13530.031800621948, 13427.899582412472, 12927.968930025118, 11934.240869828558, 11947.371987155957, 11280.004198513698, 11203.769375472126, 10800.69522957839, 8940.604388707583, 9391.845462037898, 9137.06321945826, 9192.240251273972, 8904.114305261537, 8208.48052108862, 7683.531950085594, 7479.78801644066, 7064.263043455349, 6672.640618080269, 6168.450006216272, 5963.377551253342, 5718.691302371492, 5818.276846726075, 5011.807104961814, 4805.117027602362, 4763.970358320032, 4341.7328264957405, 4420.722334190594, 4021.2456751964623, 4074.3578855749347, 3595.8038949138136, 3120.331496525375, 3286.737564088621, 2824.9055670198163, 3044.30473909728, 2956.7593626741577, 2671.6981245258457, 2486.605629607497, 2394.202080137915, 2056.8085484363623, 2115.527971493784, 1824.0507795861909, 1885.4417039387358, 1695.2336801873134, 1603.3193562784156, 1402.1004925435109, 1359.1814192502031, 1280.7474125502658, 1191.9920089325185, 1371.6478403743688, 1251.016841778094, 962.0931997537574, 875.675424934715, 784.4972823984715, 712.6153242795034]
rr1 = [17593199.0, 17747378.553702828, 18213552.039626822, 16339287.682126224, 14953930.664698647, 16500765.740705414, 16080621.255344603, 14257929.858444678, 14411505.44933656, 14618508.64446146, 13261166.772089202, 12764300.679746108, 12204582.964902963, 11618585.31574599, 11314018.439651612, 10259375.544977166, 10153396.633549444, 9992913.249633173, 8321160.305174665, 8851574.528842356, 8538056.828523446, 8396290.288637383, 8266701.240925262, 7604502.873976746, 7379938.905017687, 7739557.570299928, 6809012.420040822, 6848782.284777216, 6772040.560264805, 6617615.996814541, 6215786.282061103, 6109377.286707844, 5876423.053353531, 5489176.960378364, 5126861.519628496, 5016361.43296781, 4891104.382506222, 4584768.604564314, 4646610.256218404, 4680247.617094945, 4494805.928647405, 4132318.6204508925, 3989569.8826145856, 3739669.9345874893, 3583530.84331322, 3689617.8764515454, 3371326.9786666087, 3343008.857124392, 3190563.880148873, 3123533.313770007, 2868566.060242219, 2711716.449037398, 2829210.453557748, 2595505.126850419, 2394211.774529831, 2274838.0008344217, 2225926.8771465304, 2273640.905816475, 1978405.0296681596, 2074095.7376602811, 2085294.9382543548, 1946208.1633623554, 1951521.9163847163, 1848589.1249970845, 1832648.3334207055, 1656022.1950723666, 1624991.6037994884, 1519639.4449410317, 1445110.419811384, 1463193.6822483237, 1332939.5014129784, 1289192.4540424675, 1186906.8849008798, 1164271.4032091666, 1223416.688228876, 1176068.3338047476, 1140651.6464911452, 1093075.6402209837, 1034789.3171085669, 944960.8844460984, 893953.3883616319, 964110.5894616756, 909184.256690147, 884934.7156422193, 837980.0209533558, 804863.6993480513, 803401.3403766002, 803409.2432588103, 741119.7268399837, 729364.6253990765, 669440.7814453426, 631961.0205060861, 575432.8858370573, 611242.1338421636, 554480.4489072023, 556563.2471336286, 556778.5941092093, 519398.09408909566, 495976.4700729737, 469580.3195201299, 471573.01706790837, 461360.2988319587, 442826.51809411636, 416033.3814202735, 408964.6980912852, 350592.3417822156, 348283.4143657063, 378013.126991413, 351318.22387255635, 343937.00995764666, 327453.02856872074, 323323.43243056606, 290800.8691553662, 273340.6968441876, 265873.7805300861, 250286.90134271912, 260196.5380721711, 258513.0599901351, 243449.0533741261, 220304.29523345875, 219020.4456363878, 184180.7256572751, 186698.63369209607, 178374.92643380357, 182934.626550699, 175179.79184374583, 165659.80219003218, 160407.3686775888, 150851.66888980177, 150358.0468919811, 135159.97040537267, 152651.95541347095, 145982.37439978484, 134487.62636042255, 125194.68821252331, 110229.52884028811, 104821.67800468867, 119678.49773739705, 103454.46644185891, 102438.15900696932, 99369.7142386699, 95787.9595925071, 90671.58978322879, 78360.85896146669, 74876.3234935844, 81898.93893091338, 80613.30706060713, 71444.31305090823, 70524.96704559108, 67806.22649678784, 69783.18723036825, 66546.89945683135, 66449.62895070727, 62427.63705075592, 58915.566781452224, 60160.15326934127, 57481.73895637398, 54322.3017550021, 53271.160912535255, 51583.07106075412, 51399.836769288704, 49008.17757546289, 49240.11045870858, 47421.280382496945, 44941.05162642632, 44321.29003128929, 42115.472636343606, 41564.11076690723, 41118.73913827314, 40213.56933953981, 36778.06831297708, 37558.05348209889, 35481.46657708417, 33780.285445792906, 33704.89567313395, 30663.168335730592, 31434.17559982655, 29941.38648632876, 27940.33658951765, 26315.955614197686, 27450.213486806642, 27277.09892941914, 25269.464738815783, 23738.36996471915, 24303.143812541555, 23001.951354836805, 21510.000416147515, 21501.321990299664, 20883.67363660345, 20337.209333598108, 19471.6476337879, 18596.61919021472, 17325.83129091153, 16586.25176636976, 16883.54989558655, 14887.472026092622, 15584.103187741051, 13856.711885981673, 13530.031800621948, 13427.899582412472, 12927.968930025118, 11934.240869828558, 11947.371987155957, 11280.004198513698, 11203.769375472126, 10800.69522957839, 8940.604388707583, 9391.845462037898, 9137.06321945826, 9192.240251273972, 8904.114305261537, 8208.48052108862, 7683.531950085594, 7479.78801644066, 7064.263043455349, 6672.640618080269, 6168.450006216272, 5963.377551253342, 5718.691302371492, 5818.276846726075, 5011.807104961814, 4805.117027602362, 4763.970358320032, 4341.7328264957405, 4420.722334190594, 4021.2456751964623, 4074.3578855749347, 3595.8038949138136, 3120.331496525375, 3286.737564088621, 2824.9055670198163, 3044.30473909728, 2956.7593626741577, 2671.6981245258457, 2486.605629607497, 2394.202080137915, 2056.8085484363623, 2115.527971493784, 1824.0507795861909, 1885.4417039387358, 1695.2336801873134, 1603.3193562784156, 1402.1004925435109, 1359.1814192502031, 1280.7474125502658, 1191.9920089325185, 1371.6478403743688, 1251.016841778094, 962.0931997537574, 875.675424934715, 784.4972823984715, 712.6153242795034]
q = 5639
alpha  = 0.005
n = 75
# n,alpha,q=50,0.005,2503
log_rr0 = [log(_) for _ in rr0]
log_rr1 = [log(_) for _ in rr1]
d = len(log_rr1)
beta = 108
llb = d - beta
f = dim4free_wrapper(default_dim4free_fun,beta)
dir = "testLogs/"
log_rr2 = calculate_sim_log_gs_lengths_for_pump(log_rr0,d,llb,f) 
log_FSC_pump,llb2,blocksize2,f2 = pump_estimation2(log_rr2,q,alpha)
square_error = compute_square_error(log_rr1,log_rr2,1)
gs1_name = "actual gs after pump(%d,%d,%d)"%(llb,beta,f)
gs2_name = "simulated gs after pump(%d,%d,%d), R^2 = %.3f"%(llb,beta,f,square_error)
show_pump_gs_figure(dir,log_rr1,log_rr2,llb,beta,f,0,gs1_name,gs2_name)


# for lwe in gen_lwes():
#     (n,alpha) =lwe
#     print(n,alpha)
#     BKZ_Pump_comparison1(n,alpha)
#     BKZ_Pump_comparison2(n,alpha)


# BKZ_Pump_comparison3(180)